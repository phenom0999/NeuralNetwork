import random

class Matrix:

    def __init__(self, rows, cols, randomize=False):

        self.rows = rows
        self.cols = cols
        if randomize:
            self.data = [[random.randint(0,10) for _ in range(cols)] for _ in range(rows)]
        else:
            self.data = [[0 for _ in range(cols)] for _ in range(rows)]
    
    def print_matrix(self):
        """ Generated by chatGPT """
        col_width = max(len(str(num)) for row in self.data for num in row)  # Find the widest number

        for row in self.data:
            print(" | ".join(f"{num:>{col_width}}" for num in row))  # Right-align numbers

    def map(self, func):
        for i in range(self.rows):
            for j in range(self.cols):
                val = self.data[i][j]
                self.data[i][j] = func(val)
        
    def randomize(self):
        for i in range(self.rows):
            for j in range(self.cols):
                self.data[i][j] = random.randint(0,10)
        return self

    def multiply(self, n):
        """ Scalar multiplication """
        if isinstance(n, float):
            for i in range(self.rows):
                for j in range(self.cols):
                    self.data[i][j] *= n
        else:
            print("Cannot perform scalar multiplication with a non numeric character")
        return self

    @staticmethod
    def multiply(a, b):
        """ Check if matrix multiplication is possible """
        if not (isinstance(a, Matrix) and isinstance(b, Matrix)):
            print("Cannot perform matrix multiplication with non matrix objects")
            return None
        
        if a.cols != b.rows: # check for dimension mismatch
            print("Cannot perform matrix multiplication due to dimension mismatch")
            return None

        """ Perform matrix multiplication """
        result = Matrix(a.rows, b.cols)
        for i in range(a.rows):
            for j in range(b.cols):
                for k in range(a.cols):
                    result.data[i][j] += a.data[i][k] * b.data[k][j]

        return result 



a = Matrix(2,3, randomize=True)
b = Matrix(3,2, randomize=True)
a.print_matrix()
b.print_matrix()
result = Matrix.multiply(a,b)
result.print_matrix()


    