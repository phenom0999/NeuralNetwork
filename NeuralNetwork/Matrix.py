import random

class Matrix:

    def __init__(self, rows, cols, randomize=False):

        self.rows = rows
        self.cols = cols
        if randomize:
            self.data = [[random.randint(-5,5) for _ in range(cols)] for _ in range(rows)]
        else:
            self.data = [[0 for _ in range(cols)] for _ in range(rows)]
    
    def print_matrix(self):
        """ Generated by chatGPT """
        col_width = max(len(str(num)) for row in self.data for num in row)  # Find the widest number

        for row in self.data:
            print(" | ".join(f"{num:>{col_width}}" for num in row))  # Right-align numbers
        print()

    def map_n(self, func):
        for i in range(self.rows):
            for j in range(self.cols):
                val = self.data[i][j]
                self.data[i][j] = func(val)

    @staticmethod
    def map(a, func):
        for i in range(a.rows):
            for j in range(a.cols):
                val = a.data[i][j]
                a.data[i][j] = func(val)
        return a
        

    def add(self, n):
        """ Check if the dimensions of the matrices match """
        if not (self.rows == n.rows and self.cols == n.cols):
            print("Cannot perform element wise addition due to dimension mismatch")
        else:
            for i in range(self.rows):
                for j in range(self.cols):
                    self.data[i][j] += n.data[i][j]
        return self

    def multiply_scalar(self, n):
        """ Scalar multiplication """
        if isinstance(n, float):
            for i in range(self.rows):
                for j in range(self.cols):
                    self.data[i][j] *= n
        else:
            print("Cannot perform scalar multiplication with a non numeric character")
        return self
    
    def multiply_hadamard(self, a):
        """ Element wise multiplication """
        """ Check if the dimension of the matrices match """
        if not (self.rows == a.rows and self.cols == a.cols): # check for dimension mismatch
            print("Cannot perform hadamard matrix multiplication due to dimension mismatch")
            return None
        
        """ Perform element wise multiplication"""
        for i in range(self.rows):
            for j in range(self.cols):
                self.data[i][j] *= a.data[i][j]
        

    @staticmethod
    def multiply(a, b):
        """ Check if matrix multiplication is possible """
        if not (isinstance(a, Matrix) and isinstance(b, Matrix)):
            print("Cannot perform matrix multiplication with non matrix objects")
            return None
        
        if a.cols != b.rows: # check for dimension mismatch
            print("Cannot perform matrix multiplication due to dimension mismatch")
            return None

        """ Perform matrix multiplication """
        result = Matrix(a.rows, b.cols)
        for i in range(a.rows):
            for j in range(b.cols):
                for k in range(a.cols):
                    result.data[i][j] += a.data[i][k] * b.data[k][j]

        return result 
    
    @staticmethod 
    def transpose(a):
        result = Matrix(a.cols, a.rows)
        for i in range(result.rows):
            for j in range(result.cols):
                result.data[i][j] = a.data[j][i]
        return result
    
    @staticmethod
    def subtract(a, b):
        """ Check if the dimensions of the matrices match """
        if not (a.rows == b.rows and a.cols == b.cols):
            print("Cannot perform element wise addition due to dimension mismatch")
        else:
            result = Matrix(a.rows, a.cols)
            for i in range(a.rows):
                for j in range(b.cols):
                    result.data[i][j] = a.data[i][j] - b.data[i][j]
        return result
    
    @staticmethod
    def toMatrix(array):
        """ To convert an array into nx1 matrix """
        newMatrix = Matrix(len(array), 1)
        for i in range(len(array)):
            newMatrix.data[i][0] = array[i]
        return newMatrix
    
    def toArray(self):
        """ To convert a matrix into an array """
        newArray = []
        for i in range(self.rows):
            for j in range(self.cols):
                newArray.append(self.data[i][j])
        return newArray



